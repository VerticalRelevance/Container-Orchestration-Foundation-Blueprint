apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: springbootsample
  namespace: springbootsample
  annotations:
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-2:899456967600:certificate/e355d30c-7dcf-4965-8f23-ca3f6b491641
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
    - host: yourdomain.com
      http:
        paths:
        - path: /
          pathType: Prefix
          springbootsample:
            service:
              name: springbootsample
              port:
                number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: springbootsample
spec:
  type: LoadBalancer
  selector:
    app: springbootsample
  ports:
   -  protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springbootsample
  labels:
    app: springbootsample
  namespace: default
spec:
  replicas: 2 
  selector:
    matchLabels:
      app: springbootsample
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: springbootsample
    spec:
      containers:
      - image: 899456967600.dkr.ecr.us-east-2.amazonaws.com/springboot-multiarch:126335d
        imagePullPolicy: Always
        name: springbootsample
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
        - name: springbootsample.redis.host
          value: redis-springboot-multiarch-001.mzafdj.0001.use2.cache.amazonaws.com
        - name: springbootsample.redis.port
          value: "6379"
        - name: spring.datasource.url 
          value: jdbc-secretsmanager:mysql://springbootsample.cluster-cetdtvws2z9p.us-east-2.rds.amazonaws.com:3306
        - name: spring.datasource.username
          value: admin
        - name: spring.datasource.driver-class-name
          value: com.amazonaws.secretsmanager.sql.AWSSecretsManagerMySQLDriver
        - name: node
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
